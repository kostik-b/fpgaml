# Copyright QUB 2017

ROOT_DIR    := $(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))

# this part is to conform to the petalinux tools
#ifdef PETALINUX
#  include libs.common.mk
#endif

################# YOCTO PART ###################
APP = fpgaml
  
LIBSOURCES=*.c
OUTS = *.o
NAME := fpgaml
MAJOR = 1.0
MINOR = 1
VERSION = $(MAJOR).$(MINOR)
################# ########## ###################

.PHONY : clean build

# include directories with auxiliary stuff
INCLUDE_DIRS  := -I$(ROOT_DIR)/aux/libev-4.24/include \
                 -I$(ROOT_DIR)/aux/weelog/include     \
                 -I$(ROOT_DIR)/cpp                    \
                 -I$(ROOT_DIR)/il                     \
                 -I$(ROOT_DIR)/il/CL                  \
                 -I$(ROOT_DIR)/aux-src/               \
                 -I$(ROOT_DIR)/cpp/pugixml

LINK_LIB_DIRS := -L$(ROOT_DIR)/aux/libev-4.24/lib/x86  \
		 -L$(ROOT_DIR)/aux/libev-4.24/lib/x86_64 \
		 -L$(ROOT_DIR)/aux/libev-4.24/lib/aarch64 \
                 -L$(ROOT_DIR)/aux/weelog/lib/x86_64 \
                 -L$(ROOT_DIR)/aux/weelog/lib/aarch64 \
                 -L$(ROOT_DIR)/aux/pugixml/lib/x86_64 \
                 -L$(ROOT_DIR)/aux/pugixml/lib/aarch64

LINK_LIBS     := -pthread -l:libev.a -l:libweelogger.a -lstdc++

CXX_OPTS      := $(INCLUDE_DIRS) -g -rdynamic -O3 -fPIC -std=c++11

all : lib ocltestapp # build install

build : libfpga-ml.so place-fpga-ml #fpga-ml-app

lib : libfpga-ml.so libfpga-ml.a# just a shorthand


SRC_CPP_DIRS = cpp cpp/test_ml il cpp/test_pugixml cpp/test_bitstream_manager cpp/pugixml

# by default we build in simulator mode
ML_SIM ?= 1

ifeq ($(ML_SIM),1)
  SCHEDULER_SRC = scheduler_emu.cc sched_config_emu.cc
else
  $(error "Error: only simulator mode is supported. Please develop your own scheduler and then enable real mode.")
  exit 1
  # SCHEDULER_SRC = scheduler_hw.cc sched_config_hw.cc
endif

LIB_SRCS     =  the_buffer.cc dispatcher.cc fpgaml.cc  ndrange.cc \
               ev_timer.cc    reconf_controller.cc  algo_simple.cc \
                tracker.cc centrum.cc algo_slicing.cc free_sched_mgr.cc wee_config.cc \
               cmd_q.cc ocl_api.cc bitstream_manager.cc pugixml.cc unimem_manager.cc \
                sched_config_common.cc scheduler_common.cc $(SCHEDULER_SRC)

TEST_SRCS    =  test_algo_simple.cc test_app.cc test_pugixml.cc test_bitstream_manager.cc

#----------------- M A C R O S -----------------------------------
define depend_macro_cxx

%.o.d: $(1)
	@set -e; rm -f $$@; \
	$$(CXX) -MM $$(CXXFLAGS) $$(CXX_OPTS) $$< > $$@.$$$$; \
	sed 's,\($*\)\.o[ :]*,\1.o $$@ : ,g' < $$@.$$$$ > $$@; \
	rm -f $$@.$$$$

endef

$(foreach DIR, $(SRC_CPP_DIRS), $(eval $(call depend_macro_cxx,   $(ROOT_DIR)/$(DIR)/%.cc)))

# a macro for the build pattern rules
define build_macro_cxx

%.o : $(1)
	$${CXX} $$< -o $$@ -c $${CXXFLAGS} $${CXX_OPTS} -D__FILE_NAME_ONLY__="\"$$(@:%.o=%) \""

endef

$(foreach DIR, $(SRC_CPP_DIRS), $(eval $(call build_macro_cxx,   $(ROOT_DIR)/$(DIR)/%.cc)))
# ------------ E N D -- M A C R O S ------------------------------

# include the dependencies files (will be generated by the macros above)
include $(LIB_SRCS:%.cc=%.o.d)
include $(IL_SRCS:%.cc=%.o.d)

FPGA-ML_OBJS=$(LIB_SRCS:%.cc=%.o)

libfpga-ml.so : $(FPGA-ML_OBJS)
	$(CXX) $(FPGA-ML_OBJS) $(LINK_LIB_DIRS) $(LINK_LIBS) -shared -o libfpgaml.so.1.0.1
	ln -f -s libfpgaml.so.1.0.1 libfpgaml.so

libfpga-ml.a : $(FPGA-ML_OBJS)
	ar rcs libfpga-ml.a $^

place-fpga-ml : libfpga-ml.so
	# Install libraries
	mkdir -p $(STAGEDIR)/usr/lib
#	rsync -a *.a $(STAGEDIR)/usr/lib/
	rsync -a *.so $(STAGEDIR)/usr/lib/
	rsync -a  *.so.* $(STAGEDIR)/usr/lib/
	
	# Install headers
	mkdir -p $(STAGEDIR)/usr/include
	rsync -a $(ROOT_DIR)/src/fpga-ml.h $(STAGEDIR)/usr/include;

install: libfpga-ml.so
	# Install libraries template
	# Install lib files
	$(TARGETINST) -d $<.1.0.1 /lib/$<.1.0.1
	# Install lib symlink
	$(TARGETINST) -s $<.1.0.1 /lib/$<.1
	$(TARGETINST) -s $<.1.0.1 /lib/$<
	# Install test_pugixml
	#$(TARGETINST) -d test_pugixml /home/root/test_pugixml
	#$(TARGETINST) -d cpp/test_pugixml/xgconsole.xml /home/root/xgconsole.xml
	$(TARGETINST) -d cpp/test_bitstream_manager/incr-3d_1.xml /home/root/incr-3d_1.xml
	$(TARGETINST) -d test_bitstream_manager /home/root/test_bitstream_manager

clean:
	- rm $(FPGA-ML_OBJS)

# FIXME: The below tests are broken
#test_app : $(FPGA-ML_OBJS) FORCE
#	${CC} -o $@.o -c ${CFLAGS} $(INCLUDE_DIRS) -g -O3 -std=c11 $(ROOT_DIR)/cpp/test_ml/$@.c
#	$(CXX) test_app.o $(FPGA-ML_OBJS) $(LINK_LIB_DIRS) $(LINK_LIBS) -o $@
#
#test_algo_simple : $(FPGA-ML_OBJS) test_algo_simple.o
#	$(CXX) test_algo_simple.o $(FPGA-ML_OBJS) $(LINK_LIB_DIRS) $(LINK_LIBS) -o test_algo_simple
#
#test_cmd_q : $(FPGA-ML_OBJS) test_cmd_q.o
#	$(CXX) test_cmd_q.o $(FPGA-ML_OBJS) $(LINK_LIB_DIRS) $(LINK_LIBS) -o test_cmd_q

il : ocl_api.o
	ar rcs $@.a $^

ocltestapp : lib FORCE
	${CC} -o ocltestapp-static ${CFLAGS} $(INCLUDE_DIRS) -g -O3  $(ROOT_DIR)/il/test/ocltestapp.c -L. -l:libfpga-ml.a  $(LINK_LIB_DIRS) $(LINK_LIBS) -lstdc++  -lm
	${CC} -o ocltestapp ${CFLAGS} $(INCLUDE_DIRS) -g -O3  $(ROOT_DIR)/il/test/ocltestapp.c -L. -lstdc++ -lfpgaml
	#ln -sf $(ROOT_DIR)/il/test/res1.txt
	ln -sf $(ROOT_DIR)/cpp/test_bitstream_manager/bitstream_1.xml
	ln -sf $(ROOT_DIR)/cpp/default_config.xml
	ln -sf $(ROOT_DIR)/scripts/run_ocltestapp.sh

# FIXME: The below tests are broken
#test_pugixml : test_pugixml.o
#	$(CXX) test_pugixml.o $(LINK_LIB_DIRS) $(LINK_LIBS) -o $@
#
#test_bitstream_manager : $(FPGA-ML_OBJS) test_bitstream_manager.o
#	$(CXX) test_bitstream_manager.o $(FPGA-ML_OBJS) $(LINK_LIB_DIRS) $(LINK_LIBS) -o $@

FORCE :

